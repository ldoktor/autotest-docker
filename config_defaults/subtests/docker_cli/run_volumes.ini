[docker_cli/run_volumes]
subsubtests = volumes_rw,volumes_one_source

[docker_cli/run_volumes/volumes_rw]
#: option specifies the time in seconds to wait after all
#: docker run processes exit
wait_stop = 5
#: **CSV list of host paths to check, assumes filesystem is already mounted
#: for testing NFS, SMB, etc.  If using SELinux, don't forget to
#: 'setsebool virt_sandbox_use_<type> on' where <type> is nfs, samba, etc.**
host_paths =
#: **CSV list of destination paths in container cooresponding to host_paths above
#: (must exactly match the number of host_paths)**
cntr_paths =
#: allows fine-tuning the options to the run command
run_template = --cidfile="%%(cidfile)s",--volume="%%(host_path)s:%%(cntr_path)s"
#: allows fine-tuning the command to run inside
#: the container.  It makes use of shell-like value substitution from
#: the contents of ``host_paths`` and ``cntr_paths``.
cmd_template = /bin/bash -c 'cd "%%(cntr_path)s" && cat "%%(read_fn)s" | /usr/bin/md5sum >> "%%(write_fn)s"'

[docker_cli/run_volumes/volumes_one_source]
#: the number of containers to run concurrently.
num_containers = 5
#: the timeout for each container's IO command
cmd_timeout = 30
#: If non-empty, set this context type on host paths
#: e.g. svirt_sandbox_file_t
selinux_context =
#: where to mount the volume inside the container
cntr_path = /run-n-volume
#: the command each container should run.  This
#: should be an IO command that writes to a file at ${write_path} which will
#: be inside the mounted volume.  This command should also take time to
#: allow for taking place while the other containers are also writing IO.
exec_command = /bin/bash -c 'for i in $(seq 5); do echo "%%(name)s - $i - $(date)" >> "%%(write_path)s"; sleep 1; done && /usr/bin/md5sum "%%(write_path)s"'
